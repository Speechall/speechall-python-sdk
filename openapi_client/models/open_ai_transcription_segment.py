# coding: utf-8

"""
    Speechall API

    The Speechall REST API provides powerful and flexible speech-to-text capabilities. It allows you to transcribe audio files using various underlying STT providers and models, optionally apply custom text replacement rules, and access results in multiple formats. The API includes standard endpoints for transcription and endpoints compatible with the OpenAI API structure. 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist

class OpenAITranscriptionSegment(BaseModel):
    """
    Represents a segment of transcribed or translated text, based on OpenAI's verbose JSON structure.  # noqa: E501
    """
    id: StrictInt = Field(default=..., description="Unique identifier of the segment.")
    seek: StrictInt = Field(default=..., description="Seek offset of the segment.")
    start: Union[StrictFloat, StrictInt] = Field(default=..., description="Start time of the segment in seconds.")
    end: Union[StrictFloat, StrictInt] = Field(default=..., description="End time of the segment in seconds.")
    text: StrictStr = Field(default=..., description="Text content of the segment.")
    tokens: conlist(StrictInt) = Field(default=..., description="Array of token IDs for the text content.")
    temperature: Union[StrictFloat, StrictInt] = Field(default=..., description="Temperature parameter used for generating the segment.")
    avg_logprob: Union[StrictFloat, StrictInt] = Field(default=..., description="Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.")
    compression_ratio: Union[StrictFloat, StrictInt] = Field(default=..., description="Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.")
    no_speech_prob: Union[StrictFloat, StrictInt] = Field(default=..., description="Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.")
    __properties = ["id", "seek", "start", "end", "text", "tokens", "temperature", "avg_logprob", "compression_ratio", "no_speech_prob"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpenAITranscriptionSegment:
        """Create an instance of OpenAITranscriptionSegment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpenAITranscriptionSegment:
        """Create an instance of OpenAITranscriptionSegment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpenAITranscriptionSegment.parse_obj(obj)

        _obj = OpenAITranscriptionSegment.parse_obj({
            "id": obj.get("id"),
            "seek": obj.get("seek"),
            "start": obj.get("start"),
            "end": obj.get("end"),
            "text": obj.get("text"),
            "tokens": obj.get("tokens"),
            "temperature": obj.get("temperature"),
            "avg_logprob": obj.get("avg_logprob"),
            "compression_ratio": obj.get("compression_ratio"),
            "no_speech_prob": obj.get("no_speech_prob")
        })
        return _obj


