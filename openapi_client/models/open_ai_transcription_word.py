# coding: utf-8

"""
    Speechall API

    The Speechall REST API provides powerful and flexible speech-to-text capabilities. It allows you to transcribe audio files using various underlying STT providers and models, optionally apply custom text replacement rules, and access results in multiple formats. The API includes standard endpoints for transcription and endpoints compatible with the OpenAI API structure. 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class OpenAITranscriptionWord(BaseModel):
    """
    Represents a single word identified during transcription, including its start and end times. Included in `verbose_json` response when `word` granularity is requested.  # noqa: E501
    """
    word: StrictStr = Field(default=..., description="The text content of the word.")
    start: Union[StrictFloat, StrictInt] = Field(default=..., description="Start time of the word in seconds.")
    end: Union[StrictFloat, StrictInt] = Field(default=..., description="End time of the word in seconds.")
    __properties = ["word", "start", "end"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpenAITranscriptionWord:
        """Create an instance of OpenAITranscriptionWord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpenAITranscriptionWord:
        """Create an instance of OpenAITranscriptionWord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpenAITranscriptionWord.parse_obj(obj)

        _obj = OpenAITranscriptionWord.parse_obj({
            "word": obj.get("word"),
            "start": obj.get("start"),
            "end": obj.get("end")
        })
        return _obj


