# coding: utf-8

"""
    Speechall API

    The Speechall REST API provides powerful and flexible speech-to-text capabilities. It allows you to transcribe audio files using various underlying STT providers and models, optionally apply custom text replacement rules, and access results in multiple formats. The API includes standard endpoints for transcription and endpoints compatible with the OpenAI API structure. 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.open_ai_transcription_segment import OpenAITranscriptionSegment

class OpenAICreateTranslationResponseVerboseJson(BaseModel):
    """
    OpenAICreateTranslationResponseVerboseJson
    """
    language: StrictStr = Field(default=..., description="The language of the output translation (always `english`).")
    duration: StrictStr = Field(default=..., description="The duration of the input audio.")
    text: StrictStr = Field(default=..., description="The translated text.")
    segments: Optional[conlist(OpenAITranscriptionSegment)] = Field(default=None, description="Segments of the translated text and their corresponding details.")
    __properties = ["language", "duration", "text", "segments"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OpenAICreateTranslationResponseVerboseJson:
        """Create an instance of OpenAICreateTranslationResponseVerboseJson from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in segments (list)
        _items = []
        if self.segments:
            for _item in self.segments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['segments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OpenAICreateTranslationResponseVerboseJson:
        """Create an instance of OpenAICreateTranslationResponseVerboseJson from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OpenAICreateTranslationResponseVerboseJson.parse_obj(obj)

        _obj = OpenAICreateTranslationResponseVerboseJson.parse_obj({
            "language": obj.get("language"),
            "duration": obj.get("duration"),
            "text": obj.get("text"),
            "segments": [OpenAITranscriptionSegment.from_dict(_item) for _item in obj.get("segments")] if obj.get("segments") is not None else None
        })
        return _obj


